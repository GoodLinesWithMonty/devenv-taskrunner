#!/usr/bin/env bash
############################## devenv core start ##############################
set -o errexit
set -o pipefail

CLEAR='\033[0m'
RED='\033[0;31m'
GREEN='\033[0;32m'
ORANGE='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
DARKGRAY='\033[1;30m'
YELLOW='\033[1;33m'
WHITE='\033[1;37m'

boot_devenv() {
  check_git_installed
  check_git_init
  check_build_folder
  export_project_build_path
  check_devenv_function_script
  load_project_dotenv

  success "Running devenv ..."
}

check_devenv_function_script() {
  if [[ ! -e ${PROJECT_BUILD}/devenv-functions.sh ]]; then
    throw_error "${PROJECT_BUILD}/devenv-functions.sh is missing!"
  fi
}

check_build_folder() {
  if [[ ! -d $(git rev-parse --show-toplevel)/.build ]]; then
    throw_error "$(git rev-parse --show-toplevel)/.build/ is missing!"
  fi
}

check_git_installed() {
  if ! command -v git > /dev/null 2>&1; then
    throw_error "Git is necessary to run devenv task runner!"
  fi
}

check_git_init() {
  if [[ $(git rev-parse --show-toplevel 2>/dev/null) ]]; then
    :
  else
    throw_error "You must init a git repository before you can use devenv task runner!"
  fi
}

export_project_build_path() {
  set -o allexport
  PROJECT_BUILD="$(git rev-parse --show-toplevel)/.build"
  set +o allexport
}

load_project_dotenv() {
  if [[ -e ${PROJECT_BUILD}/.env ]]; then
    success "Found project .env file"
    set -o allexport
    source ${PROJECT_BUILD}/.env
    set +o allexport
  fi
}

throw_warning() {
  printf "${ORANGE}WARNING: ${ORANGE}$@${CLEAR}\n"
  exit 0
}

throw_error() {
  printf "${RED}ERROR: ${RED}$@${CLEAR}\n"
  exit 1
}

success() {
  printf "${GREEN}$@${CLEAR}\n"
}

execute_devenv_command() {
  . ${PROJECT_BUILD}/devenv-functions.sh && "$@"
}

############################## devenv core end ##############################
boot_devenv
execute_devenv_command "$@"